Students: Kieran Cosgrove(20226841) and Mile Stosic(20233349)

//Purpose and Objective
The objective of this lab is to compromise a server program using a standard buffer overflow and to subsequently brute force guess the secret password that is revealed. This was accomplished with the motivation to understand how attacks happen so that we can better design and implement security code and to test security attacks in a controlled environment to test the security of a particular program or application. 

//Process of Completion

//Selfcomp.c Description
The first objective of the lab is to obtain the environment variables from the server. Environment variables are part of every Linux process, and are often passed to children processes. The first file that was completed was selfcomp.c. It was used to attack itself to understand how the attack works by seeing the code. The NOP instruction align the return address at the end of the exploit in relation to the doTest method. After this a register takes the address returned to doTest, which forces the program pointer to indicate the beginning of the exploit code.


//selfcomp.c Important Values:
Return Address on the Stack: stack-93 = 0x2D, 0xE0, 0xFF, 0xFF
Padding Used: 21 terms of 0x90 were used. We initially tried 5; however, we would get a segment fault until we used 21 values.
String size to compromise server: 161
Value used in comprise array: 159


//Client.c Description
The next file is client.c. This function sends the exploit string to the server. The same process of taking the exploit code and copying it into client.c was repeated the same way it was done in selfcomp.c and the values to comprise the server were found using the C array variable compromise1. We encountered issues printing the environment variables when we ran our client.c file with a port number of 10000 as the argument. To remediate this issue we first used gdb client core to debug the core file and then we used info registers to look at the source code elements and contents of the registers.

//Client.c Important Values
Return Address on the stack: 0xF5, 0xDE, 0xFF, 0xFF
Padding Used: 85 terms of 0x90, similarly we tried 69 terms but that did not work for our code.
String size to compromise server: 226 
Value used in compromise array: 224

//Building the Shell Code
An exploit code was created called exploit.lst. The objective of the exploit is to get the shellcode into the memory of the target machine and execute it. This is taking advantage of the library routine 'gets' by writing a buffer to the stack which causes the return address to overflow into the beginning of the exploit. Strings are stored in the assembly language code. These byte arrays cannot contain null values or newline characters, Thus the code must be moved into the null bytes of every string before moving into array parameters on the stack. In summary, to build the exploit code we had to restore the array, get the environ variable into the rdx register, remove nulls and new lines, compute code length to be able to inject it into the vulnerable server, and use the correct amount of padding. 

//Brute Force Guessing
The final step was taking the variable MD5 from the outputted environment variables for the server and use this to compare against the md5sum generated hash to see if they were the same. Eventually we discovered that the hash generated matched the environment variable when we used the password "Burritos24." Make reference to the testing documentation for further explanation of our testing process.



